{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectUser","changeTodoStatus","className","map","todo","classNames","completed","htmlFor","id","type","checked","onChange","title","onClick","userId","getUser","BASE_URL_USERS","fetch","then","res","ok","Error","status","statusText","json","CurrentUser","state","user","hasLoadError","prevProps","this","props","loadUser","a","setState","clearUser","name","email","phone","React","Component","App","selectedUserId","clearUserInfo","getStatus","copy","filterTitle","includes","handleChange","event","target","value","visibleTodos","filter","placeholder","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.06b29f75.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\nimport 'bulma/css/bulma.css';\n\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n  changeTodoStatus: (id: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectUser, changeTodoStatus }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            })}\n          >\n            <label htmlFor={`${todo.id}`}>\n              <input\n                type=\"checkbox\"\n                id={`${todo.id}`}\n                checked={todo.completed}\n                onChange={() => changeTodoStatus(todo.id)}\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className=\"\n                TodoList__user-button\n                TodoList__user-button--selected\n                button\n              \"\n              type=\"button\"\n              onClick={() => selectUser(todo.userId)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const BASE_URL_TODOS = 'https://mate.academy/students-api/todos';\n\nexport function request(): Promise<Todo[]> {\n  return fetch(BASE_URL_TODOS)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n}\n\nexport const getUser = (userId: number): Promise<User> => {\n  const BASE_URL_USERS = `https://mate.academy/students-api/users/${userId}`;\n\n  return fetch(BASE_URL_USERS)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUser } from '../../api';\n\ntype Props = {\n  userId: number,\n  clearUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n  hasLoadError: boolean,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n    hasLoadError: false,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const { userId } = this.props;\n\n    if (prevProps.userId !== userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    const { userId } = this.props;\n\n    try {\n      const user = await getUser(userId);\n\n      this.setState({\n        user,\n        hasLoadError: false,\n      });\n    } catch (error) {\n      this.setState({ hasLoadError: true });\n    }\n  }\n\n  render() {\n    const { user, hasLoadError } = this.state;\n    const { clearUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        {hasLoadError\n          ? <div>User not found</div>\n          : (\n            <div>\n              <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user?.id}`}</span></h2>\n\n              <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n              <p className=\"CurrentUser__email\">{user?.email}</p>\n              <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n              <button\n                type=\"button\"\n                onClick={() => clearUser()}\n              >\n                Clear\n              </button>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\nimport { request } from './api';\n\ntype State = {\n  todos: Todo[];\n  selectedUserId: number;\n  title: string,\n  status: string,\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n    title: '',\n    status: 'all',\n  };\n\n  async componentDidMount() {\n    const todos = await request();\n\n    this.setState({ todos });\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUserInfo = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  getStatus = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return true;\n      case 'active':\n        return false;\n      default:\n        return 'all';\n    }\n  };\n\n  changeTodoStatus = (id: number) => {\n    const { todos } = this.state;\n\n    const copy = [...todos].map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: copy,\n    }));\n  };\n\n  filterTitle = (todo: Todo) => {\n    const { status, title } = this.state;\n\n    if (this.getStatus(status) === 'all') {\n      return (todo.title.includes(title));\n    }\n\n    return (todo.title.includes(title)\n      && todo.completed === this.getStatus(status));\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLSelectElement>) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n    const visibleTodos = todos.filter(this.filterTitle);\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n\n          <input\n            className=\"input is-primary\"\n            placeholder=\"Wrire a title\"\n            name=\"title\"\n            type=\"text\"\n            value={this.state.title}\n            onChange={this.handleChange}\n          />\n          <div className=\"select is-primary\">\n            <select\n              name=\"status\"\n              value={this.state.status}\n              onChange={this.handleChange}\n            >\n              <option value=\"all\">all</option>\n              <option value=\"completed\">completed</option>\n              <option value=\"active\">active</option>\n            </select>\n          </div>\n\n          <TodoList\n            todos={visibleTodos}\n            selectUser={this.selectUser}\n            changeTodoStatus={this.changeTodoStatus}\n          />\n        </div>\n\n        {\n          todos.length > 0 && (\n            <div className=\"App__content\">\n              <div className=\"App__content-container\">\n                {selectedUserId ? (\n                  <CurrentUser\n                    userId={this.state.selectedUserId}\n                    clearUser={this.clearUserInfo}\n                  />\n                ) : (\n                  <div className=\"content is-large has-text-centered has-text-weight-bold\">\n                    No user selected\n                  </div>\n                )}\n              </div>\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}